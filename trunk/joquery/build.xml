<project name="joquery" default="all" basedir=".">
    <description>
        joquery build file with code coverage
    </description>

    <property name="product" value="joquery"/>
    <property name="version" value="0.14"/>

    <property name="src" location="${basedir}/src"/>
    <property name="src.test" location="${basedir}/src-test"/>
    <property name="ci" location="${basedir}/ci"/>
    <property name="build" location="${ci}/build"/>
    <property name="reports" location="${ci}/reports"/>
    <property name="coverage" location="${ci}/coverage" />
    <property name="instr" location="${ci}/instr" />
    <property name="jar" location="${ci}/jar" />
    <property name="lib" location="${basedir}/lib" />
    <property name="emma.dir" value="${lib}/emma.2.0.5" />

    <!-- Set emma.lib to refer to the list of EMMA jar files -->
    <path id="emma.lib">
        <fileset dir="${emma.dir}">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="prodcode.classpath">
        <pathelement path="${build}"/>
    </path>

    <path id="build.classpath">
        <pathelement path="${build}"/>
        <files includes="${lib}/**/*.jar" excludes="${lib}/*emma*/*.jar"/>
    </path>

    <path id="run.classpath">
        <path  refid="build.classpath"/>
        <files includes="${lib}/**/*.jar"/>
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>

    <target name="with.emma">
        <mkdir dir="${coverage}" />
        <property name="emma.enabled" value="true"/>
        <property name="out.instr.dir" value="${instr}" />
        <path id="run.classpath">
            <pathelement location="${out.instr.dir}" />
            <path refid="build.classpath"/>
        </path>
    </target>

    <target name="create-report" >
        <emma>
            <report sourcepath="${src},${src.test}" >
                <fileset dir="${coverage}" >
                    <include name="*.emma" />
                </fileset>
                <html outfile="${coverage}/coverage.html" />
            </report>
        </emma>
    </target>

    <!-- Creates Destination directory and compiles files in source directory-->
    <target name="compile-code" >
        <mkdir dir="${build}" />
        <javac srcdir="${src}" destdir="${build}"  debug="true"/>
    </target>

    <target name="compile-test" >
        <mkdir dir="${build}" />
        <javac srcdir="${src.test}" destdir="${build}"  debug="true">
            <classpath refid="build.classpath"/>
        </javac>
    </target>

    <!-- Instrument the code -->
    <target name="instr" >
        <mkdir dir="${instr}" />
        <emma>
            <instr instrpathref="prodcode.classpath"
                   destdir="${instr}"
                   metadatafile="${coverage}/metadata.emma"
                   merge="true"
                    />
        </emma>
    </target>

    <!-- runs the tests -->
    <target name="run-test" description="runs the examples" >
        <mkdir dir="${reports}" />
        <junit printsummary="yes" fork="yes"
               haltonfailure="yes" >
            <classpath>
                <path path="${instr}"/>
                <path  refid="run.classpath"/>
            </classpath>
            <jvmarg value="-Demma.coverage.out.file=${coverage}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=true" />
            <jvmarg value="-XX:-UseSplitVerifier" />
            <formatter type="plain"/>
            <formatter type="xml" />
            <batchtest todir="${reports}">
                <fileset dir="${src.test}" >
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="create-jar">
        <jar jarfile="${jar}/${product}-${version}.jar" compress="true">
            <fileset dir= "${build}"/>
        </jar>
        <jar jarfile="${jar}/${product}-${version}-src.jar" compress="true">
            <fileset dir= "${src}"/>
            <fileset dir= "${src.test}"/>
        </jar>
    </target>

    <!-- Delete the ${build} directory-->
    <target name="clean">
        <delete dir="${ci}"/>
    </target>

    <target name="all">
        <antcall target="clean"/>
        <antcall target="compile-code"/>
        <antcall target="compile-test"/>
        <antcall target="with.emma"/>
        <antcall target="instr"/>
        <antcall target="run-test"/>
        <antcall target="create-report"/>
        <antcall target="create-jar"/>
    </target>
</project>