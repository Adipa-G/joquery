#summary Expressions
=Expressions=
As of current Joquery supports only 3 expression types

 # {{{value}}}
 # {{{exec}}}
 # {{{property}}}

 Following class and object definitions are referred in the examples
 {{{
 class Dto
 {
     private int id;
     private String text;

     public int getId()
     {
         return id;
     }

     public int getText()
     {
         return text;
     }
 }

 Collection<Dto> testList = new ArrayList<>();
 testList.Add(new Dto());
 }}}

==value==
this is the expression used to define a constant value
{{{
Filter<Dto> query = CQ.<Dto>filter()
    .from(testList)
    .where()
    .property(Dto::getId).eq().value(1);
}}}
In this example value of getId method is compared with value 1.

==exec==
{{{
Filter<Dto> query = CQ.<Dto>filter()
    .from(testList)
    .where()
    .exec(s -> s.getId() + 1).eq().value(2);
}}}
In this example value of getId is manipulated in a method to calculate the value required to equate.

==property==
{{{
Filter<Dto> query = CQ.<Dto>filter()
    .from(testList)
    .where()
    .property("id").eq().value(1);
}}}
In this case the property id of the object is used to get the value using reflection. It use first field ("id" in this case) to obtain the value if not it goes for getter ("getId" in this case, if it's not found it tried "isId"). So it's paramount to pass the proper camel case name of the field with lower case first letter.